// Test file for lexical analyzer - This should cover all possible entries of different cases

// Testing reserved words
tipo inteiro var x;
se x > 10 senao
  retorna 42;
enquanto decimal com

// Testing identifiers (valid)
_variable
test_var
simple_identifier
a1b2c3
underscore_start

// Testing integer literals
0
42
123
999

// Testing decimal literals
0.0
3.14159
123.456
.5
0.123

// Testing special characters
! * / % + - < > [ ] ( ) = , ; & |

// Testing composite operators
<= >= == != := ->

// Testing assignments and expressions
x := 42 + 3.14;
result := (a * b) / c;
array[index] := value;

// Testing conditional statements
se x == y senao
  z := x + y;

// Testing while loops
enquanto i < 10
  i := i + 1;

// Testing function-like syntax
funcao(param1, param2) -> retorna;

// Testing comments (should be ignored)
// This is a comment and should be ignored
var test // inline comment
// Another comment

// Testing error cases (uncomment to test errors)
// @ # $ ^ ~ ` 

// Mixed complex example
tipo decimal calc_area(decimal raio) ->
  decimal pi := 3.14159;
  retorna pi * raio * raio;

// More extreme tests - edge cases and boundary conditions
tipo123a1.34;<>wasssuuuuuup12345

// Extreme identifier tests
_1234567890abcdefghijklmnopqrstuvwxyz
a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z
___multiple___underscores___
identifier123with456numbers789

// Extreme decimal tests
0.000000000001
999999.999999
.0
.123456789
0.0000000000000000000001

// Extreme integer tests
0000000000000001
9999999999999999
000
123000

// Complex operator sequences
<=>=!===!=:=->
!*/%+-<>[]()=,;&|
<<>>====!!!!

// Mixed sequences without spaces
var123:=456+.789*id_test
se(x<=10):=y->z;
array[0]:=func(a,b)->retorna;

// Nested structures
((()))[[[]]]
((var123:=.456))
[[[tipo[inteiro]]]]

// Multiple operators in sequence
x:=y+z*w/v%u-t
a<=b>=c==d!=e
!!!!not_an_operator****

// Edge case with reserved words mixed
tipointeiro vardecimal sesenao
retornaenquanto comcom
tipovarsesenaoretornaenquantocom

// Extreme whitespace and newlines (testing robustness)
tipo    var    inteiro;
x:=



    42;

// Complex mathematical expressions
result:=(((a+b)*c)/d)%e;
formula:=.5*pi*raio*raio+offset;

// Boundary decimal cases






// Long sequences
abcdefghijklmnopqrstuvwxyz0123456789_test_very_long_identifier
0123456789.0123456789
<=>=!=:=->!*/%+-<>[]()=,;&|tipo var se senao

// Error-prone sequences (should still tokenize correctly)





// Testing _variable

_a


